import tensorflow as tf
import setting

from tensorflow.keras import layers
from tensorflow.keras import losses

#Set Parameters
parameters = setting.get_parameters()
path = parameters["project_path"]
train_dataset_dir = parameters["train_save_path"]
val_dataset_dir = parameters["val_save_path"]
checkpoint_path = parameters["checkpoint_path"]
log_dir = parameters["log_path"]

batch_size = setting.batch_size
epochs = setting.epochs


#Get dataset
train_ds = tf.data.experimental.load(train_dataset_dir)
val_ds = tf.data.experimental.load(val_dataset_dir)

#Get Input_Size
input_shape = tf.shape(train_ds.take(1).get_single_element()[0])[1:]
print(input_shape)

#THE model
test_model = tf.keras.models.Sequential([
    layers.Conv1D(16, 128, padding="valid", activation="relu", input_shape=input_shape),
    layers.MaxPool1D(16),
    layers.Conv1D(32, 128, padding="valid", activation="relu"),
    layers.MaxPool1D(16),
    layers.Conv1D(64, 128, padding="valid", activation="relu"),
    layers.Dropout(0.5),
    # layers.GRU(256),
    layers.GlobalMaxPool1D(),
    layers.Dense(64, activation="relu"),
    layers.Dense(9),
])
test_model.compile(
    loss=losses.SparseCategoricalCrossentropy(from_logits=True),
    optimizer="adam",
    metrics=["accuracy"]
)


#Save Model Weights
cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path,
                                                 save_weights_only=True,
                                                 verbose=1)
#Log training data to tensorboard
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)

#Train Model
test_model.summary()
test_model.fit(train_ds,validation_data=val_ds,epochs=epochs,callbacks=[cp_callback,tensorboard_callback])

#test = test_model.fit(train_text,train_label,batch_size=batch_size,epochs=epochs)
#test_model.save(model_dir)
