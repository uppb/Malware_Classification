import tensorflow as tf
import pathlib
import numpy as np
from tensorflow.keras import layers
from tensorflow.keras import losses
from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score

path = str(pathlib.Path.home()) + "/School/Comps/"
checkpoint_path = path + "training_1/cp.ckpt"
test_dataset_dir = path + "/dataset/val_save"


test_ds = tf.data.experimental.load(test_dataset_dir)
test_text = [a[0] for a in test_ds.as_numpy_iterator()]
input_size = (2427472,)
padded_shapes = (tf.TensorShape([None,input_size[0]]), tf.TensorShape([None]))
padding_values = (tf.constant(0,dtype="int64"), tf.constant(-111))
test_ds = test_ds.padded_batch(12,padded_shapes=padded_shapes,padding_values=padding_values)
test_ds = test_ds.unbatch()

test_model = tf.keras.models.Sequential([
    layers.Input(input_size,batch_size=12),
    layers.Embedding(256+2,5,mask_zero=True,trainable=True),
    layers.Flatten(),
    layers.Dense(50,activation="relu"),
    layers.Dense(9),
])
test_model.compile(
    loss=losses.SparseCategoricalCrossentropy(from_logits=True),
    optimizer="adam",
    metrics=[tf.keras.metrics.Precision(),tf.keras.metrics.Recall()]
)
test_model.summary()
test_model.load_weights(checkpoint_path)
y_prob = test_model.predict(test_ds,verbose=1)
y_classes = y_prob.argmax(axis=-1)
temp = [a[1] for a in test_ds.as_numpy_iterator()]
y_true = []
for i in temp:
    for a in i:
        y_true.append(a)
y_true = np.asarray(y_true)
y_true = y_true[:-9]
y_classes = y_classes[:-9]
print("Precision: ",precision_score(y_true, y_classes, average = "macro"))
print("Recall: ",recall_score(y_true, y_classes, average = "macro"))
print("F1: ",f1_score(y_true, y_classes, average = "macro"))
print("Accuracy: ",accuracy_score(y_true, y_classes))