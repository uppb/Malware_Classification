import tensorflow as tf
import settings
import numpy as np
import matplotlib.pyplot as plt
import pathlib

from model import cnn,cnn_attention
from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score,confusion_matrix,ConfusionMatrixDisplay

tf.keras.backend.clear_session()

parameters = settings.get_parameters()
path = parameters["project_path"]
test_dataset_dir = parameters["test_save_path"]
path = parameters["project_path"]
checkpoint_path = path + "training_cnn_att4/cp.ckpt"
batch_size=settings.batch_size

pred_path = pathlib.Path(path+"predictions.npy")
true_path = pathlib.Path(path+"true.npy")
labels = ["Ramnit","Lollipop","Kelihos_ver3","Vundo","Simda","Tracur","Kelihos_ver1","Obfuscator.ACY","Gatak"]

if not true_path.is_file():
    test_ds = tf.data.experimental.load(test_dataset_dir)
    input_shape = tf.shape(test_ds.take(1).get_single_element()[0])
    test_ds = test_ds.batch(batch_size, num_parallel_calls=tf.data.AUTOTUNE)
    test_ds = test_ds.prefetch(tf.data.AUTOTUNE)

    test_model = cnn_attention(input_shape)
    test_model.load_weights(checkpoint_path)

    temp = [a[1] for a in test_ds.as_numpy_iterator()]
    y_true = []
    for i in temp:
        for a in i:
            y_true.append(a)
    y_true = np.asarray(y_true)
    np.save(true_path,y_true)

if not pred_path.is_file():
    y_prob = test_model.predict(test_ds,verbose=1)
    np.save(pred_path,y_prob)

y_true = np.load(true_path)
y_prob = np.load(pred_path)
y_pred = y_prob.argmax(axis=-1)

cm = confusion_matrix(y_true, y_pred)
display = ConfusionMatrixDisplay(cm,display_labels=labels)
display.plot()
display.ax_.set_xticklabels(labels, rotation = 60)
display.figure_.tight_layout()
plt.savefig(path + 'confusion_matrix.png')
print("Precision: ",precision_score(y_true, y_pred, average = "weighted"))
print("Recall: ",recall_score(y_true, y_pred, average = "weighted"))
print("F1: ",f1_score(y_true, y_pred, average = "weighted"))
print("Accuracy: ",accuracy_score(y_true, y_pred))