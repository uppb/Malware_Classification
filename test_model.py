import tensorflow as tf
import settings
import numpy as np
from tensorflow.keras import layers
from tensorflow.keras import losses
from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score

parameters = settings.get_parameters()
path = parameters["project_path"]
test_dataset_dir = parameters["test_save_path"]
checkpoint_path = parameters["checkpoint_path"]
batch_size=settings.batch_size

test_ds = tf.data.experimental.load(test_dataset_dir)
input_shape = tf.shape(test_ds.take(1).get_single_element()[0])[1:]

test_model = tf.keras.models.Sequential([
    layers.Masking(tf.constant(0,dtype=tf.float32),input_shape=input_shape),
    layers.Conv1D(16, 128, padding="valid", activation="relu"),
    layers.MaxPool1D(16),
    layers.Conv1D(32, 128, padding="valid", activation="relu"),
    layers.MaxPool1D(16),
    layers.Conv1D(64, 128, padding="valid", activation="relu"),
    layers.Dropout(0.5),
    # layers.GRU(256),
    layers.GlobalMaxPool1D(),
    layers.Dense(64, activation="relu"),
    layers.Dense(9),
])
test_model.compile(
    loss=losses.SparseCategoricalCrossentropy(from_logits=True),
    optimizer="adam",
    metrics=[tf.keras.metrics.Precision(),tf.keras.metrics.Recall()]
)
test_model.summary()
test_model.load_weights(checkpoint_path)
y_prob = test_model.predict(test_ds,verbose=1)
y_classes = y_prob.argmax(axis=-1)
temp = [a[1] for a in test_ds.as_numpy_iterator()]
y_true = []
for i in temp:
    for a in i:
        y_true.append(a)
y_true = np.asarray(y_true)
y_true = y_true[:-9]
y_classes = y_classes[:-9]
print("Precision: ",precision_score(y_true, y_classes, average = "macro"))
print("Recall: ",recall_score(y_true, y_classes, average = "macro"))
print("F1: ",f1_score(y_true, y_classes, average = "macro"))
print("Accuracy: ",accuracy_score(y_true, y_classes))