import tensorflow as tf
import settings

from model import cnn, cnn_attention

tf.keras.backend.clear_session()

#Set Parameters
parameters = settings.get_parameters()
path = parameters["project_path"]
train_dataset_dir = parameters["train_save_path"]
val_dataset_dir = parameters["val_save_path"]
checkpoint_path = parameters["checkpoint_path"]
log_dir = parameters["log_path"]

batch_size = settings.batch_size
epochs = settings.epochs


#Get dataset
train_ds = tf.data.experimental.load(train_dataset_dir)
val_ds = tf.data.experimental.load(val_dataset_dir)

#Get Input_Size
input_shape = tf.shape(train_ds.take(1).get_single_element()[0])

#Batch Dataset
train_ds = train_ds.batch(batch_size,num_parallel_calls=tf.data.AUTOTUNE)
val_ds = val_ds.batch(batch_size,num_parallel_calls=tf.data.AUTOTUNE)
train_ds = train_ds.prefetch(tf.data.AUTOTUNE)
val_ds = val_ds.prefetch(tf.data.AUTOTUNE)

#Create Model
model = cnn_attention(input_shape)


#Save Model Weights
cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path,
                                                 save_weights_only=True,
                                                 monitor='val_loss',
                                                 save_best_only=True,
                                                 mode="auto",
                                                 verbose=1)
#Log training data to tensorboard
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)

#Early stop callbacks/ stop training if not improving
es_callback = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=parameters["patience"])

#Train Model
callback_list = [cp_callback,tensorboard_callback,es_callback]
model.summary()
model.fit(train_ds,validation_data=val_ds,epochs=epochs,callbacks=callback_list)
